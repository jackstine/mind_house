// Mocks generated by Mockito 5.4.6 from annotations
// in mind_house_app/test/blocs/tag_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mind_house_app/models/tag.dart' as _i4;
import 'package:mind_house_app/repositories/interfaces/tag_repository_interface.dart'
    as _i2;
import 'package:mind_house_app/repositories/tag_repository.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ITagRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockITagRepository extends _i1.Mock implements _i2.ITagRepository {
  MockITagRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> create(_i4.Tag? tag) =>
      (super.noSuchMethod(
            Invocation.method(#create, [tag]),
            returnValue: _i3.Future<String>.value(
              _i5.dummyValue<String>(this, Invocation.method(#create, [tag])),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<_i4.Tag?> getById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getById, [id]),
            returnValue: _i3.Future<_i4.Tag?>.value(),
          )
          as _i3.Future<_i4.Tag?>);

  @override
  _i3.Future<bool> update(_i4.Tag? tag) =>
      (super.noSuchMethod(
            Invocation.method(#update, [tag]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> delete(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<_i4.Tag>> getAll({int? limit, int? offset}) =>
      (super.noSuchMethod(
            Invocation.method(#getAll, [], {#limit: limit, #offset: offset}),
            returnValue: _i3.Future<List<_i4.Tag>>.value(<_i4.Tag>[]),
          )
          as _i3.Future<List<_i4.Tag>>);

  @override
  _i3.Future<List<_i4.Tag>> getAllSorted({
    required _i6.TagSortField? sortBy,
    required _i6.SortOrder? sortOrder,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getAllSorted, [], {
              #sortBy: sortBy,
              #sortOrder: sortOrder,
              #limit: limit,
              #offset: offset,
            }),
            returnValue: _i3.Future<List<_i4.Tag>>.value(<_i4.Tag>[]),
          )
          as _i3.Future<List<_i4.Tag>>);

  @override
  _i3.Future<List<_i4.Tag>> searchByName(
    String? query, {
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #searchByName,
              [query],
              {#limit: limit, #offset: offset},
            ),
            returnValue: _i3.Future<List<_i4.Tag>>.value(<_i4.Tag>[]),
          )
          as _i3.Future<List<_i4.Tag>>);

  @override
  _i3.Future<_i4.Tag?> getByName(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getByName, [name]),
            returnValue: _i3.Future<_i4.Tag?>.value(),
          )
          as _i3.Future<_i4.Tag?>);

  @override
  _i3.Future<List<_i4.Tag>> getByColor(
    String? color, {
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getByColor,
              [color],
              {#limit: limit, #offset: offset},
            ),
            returnValue: _i3.Future<List<_i4.Tag>>.value(<_i4.Tag>[]),
          )
          as _i3.Future<List<_i4.Tag>>);

  @override
  _i3.Future<List<_i4.Tag>> getFrequentlyUsed({
    int? threshold = 10,
    int? limit,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getFrequentlyUsed, [], {
              #threshold: threshold,
              #limit: limit,
            }),
            returnValue: _i3.Future<List<_i4.Tag>>.value(<_i4.Tag>[]),
          )
          as _i3.Future<List<_i4.Tag>>);

  @override
  _i3.Future<List<_i4.Tag>> getUnused({int? limit}) =>
      (super.noSuchMethod(
            Invocation.method(#getUnused, [], {#limit: limit}),
            returnValue: _i3.Future<List<_i4.Tag>>.value(<_i4.Tag>[]),
          )
          as _i3.Future<List<_i4.Tag>>);

  @override
  _i3.Future<List<_i4.Tag>> getRecentlyUsed({int? days = 7, int? limit = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentlyUsed, [], {
              #days: days,
              #limit: limit,
            }),
            returnValue: _i3.Future<List<_i4.Tag>>.value(<_i4.Tag>[]),
          )
          as _i3.Future<List<_i4.Tag>>);

  @override
  _i3.Future<int> getCount({
    bool? hasUsage,
    String? color,
    int? minUsageCount,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCount, [], {
              #hasUsage: hasUsage,
              #color: color,
              #minUsageCount: minUsageCount,
            }),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<List<String>> getUsedColors() =>
      (super.noSuchMethod(
            Invocation.method(#getUsedColors, []),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Future<bool> incrementUsage(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#incrementUsage, [id]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> updateLastUsed(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#updateLastUsed, [id]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<_i4.Tag>> getSuggestions(
    String? partialName, {
    int? limit = 5,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getSuggestions, [partialName], {#limit: limit}),
            returnValue: _i3.Future<List<_i4.Tag>>.value(<_i4.Tag>[]),
          )
          as _i3.Future<List<_i4.Tag>>);

  @override
  _i3.Future<List<_i4.Tag>> getSmartSuggestions(
    String? partialName, {
    List<String>? existingTagIds = const [],
    int? limit = 5,
    bool? includeRecentlyUsed = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getSmartSuggestions,
              [partialName],
              {
                #existingTagIds: existingTagIds,
                #limit: limit,
                #includeRecentlyUsed: includeRecentlyUsed,
              },
            ),
            returnValue: _i3.Future<List<_i4.Tag>>.value(<_i4.Tag>[]),
          )
          as _i3.Future<List<_i4.Tag>>);

  @override
  _i3.Future<List<_i4.Tag>> getContextualSuggestions(
    List<String>? baseTagIds, {
    int? limit = 5,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getContextualSuggestions,
              [baseTagIds],
              {#limit: limit},
            ),
            returnValue: _i3.Future<List<_i4.Tag>>.value(<_i4.Tag>[]),
          )
          as _i3.Future<List<_i4.Tag>>);

  @override
  _i3.Future<List<_i4.Tag>> getTrendingSuggestions({
    int? days = 30,
    int? limit = 5,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTrendingSuggestions, [], {
              #days: days,
              #limit: limit,
            }),
            returnValue: _i3.Future<List<_i4.Tag>>.value(<_i4.Tag>[]),
          )
          as _i3.Future<List<_i4.Tag>>);

  @override
  _i3.Future<List<_i4.Tag>> getDiverseSuggestions({
    List<String>? excludeTagIds = const [],
    int? limit = 5,
    int? maxPerColor = 2,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getDiverseSuggestions, [], {
              #excludeTagIds: excludeTagIds,
              #limit: limit,
              #maxPerColor: maxPerColor,
            }),
            returnValue: _i3.Future<List<_i4.Tag>>.value(<_i4.Tag>[]),
          )
          as _i3.Future<List<_i4.Tag>>);
}
