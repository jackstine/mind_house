// Mocks generated by Mockito 5.4.6 from annotations
// in mind_house_app/test/mocks/mock_repositories.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mind_house_app/database/database_helper.dart' as _i8;
import 'package:mind_house_app/models/information.dart' as _i2;
import 'package:mind_house_app/models/tag.dart' as _i3;
import 'package:mind_house_app/repositories/information_repository.dart' as _i5;
import 'package:mind_house_app/repositories/tag_repository.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeInformation_0 extends _i1.SmartFake implements _i2.Information {
  _FakeInformation_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTag_1 extends _i1.SmartFake implements _i3.Tag {
  _FakeTag_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabase_2 extends _i1.SmartFake implements _i4.Database {
  _FakeDatabase_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [InformationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockInformationRepository extends _i1.Mock
    implements _i5.InformationRepository {
  MockInformationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Information> create(_i2.Information? information) =>
      (super.noSuchMethod(
            Invocation.method(#create, [information]),
            returnValue: _i6.Future<_i2.Information>.value(
              _FakeInformation_0(
                this,
                Invocation.method(#create, [information]),
              ),
            ),
          )
          as _i6.Future<_i2.Information>);

  @override
  _i6.Future<_i2.Information?> getById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getById, [id]),
            returnValue: _i6.Future<_i2.Information?>.value(),
          )
          as _i6.Future<_i2.Information?>);

  @override
  _i6.Future<List<_i2.Information>> getAll() =>
      (super.noSuchMethod(
            Invocation.method(#getAll, []),
            returnValue: _i6.Future<List<_i2.Information>>.value(
              <_i2.Information>[],
            ),
          )
          as _i6.Future<List<_i2.Information>>);

  @override
  _i6.Future<_i2.Information> update(_i2.Information? information) =>
      (super.noSuchMethod(
            Invocation.method(#update, [information]),
            returnValue: _i6.Future<_i2.Information>.value(
              _FakeInformation_0(
                this,
                Invocation.method(#update, [information]),
              ),
            ),
          )
          as _i6.Future<_i2.Information>);

  @override
  _i6.Future<void> delete(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i2.Information>> searchByContent(String? searchTerm) =>
      (super.noSuchMethod(
            Invocation.method(#searchByContent, [searchTerm]),
            returnValue: _i6.Future<List<_i2.Information>>.value(
              <_i2.Information>[],
            ),
          )
          as _i6.Future<List<_i2.Information>>);

  @override
  _i6.Future<int> count() =>
      (super.noSuchMethod(
            Invocation.method(#count, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<List<_i2.Information>> getWithPagination({
    int? limit = 20,
    int? offset = 0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getWithPagination, [], {
              #limit: limit,
              #offset: offset,
            }),
            returnValue: _i6.Future<List<_i2.Information>>.value(
              <_i2.Information>[],
            ),
          )
          as _i6.Future<List<_i2.Information>>);

  @override
  _i6.Future<List<_i2.Information>> getByDateRange({
    required DateTime? startDate,
    required DateTime? endDate,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getByDateRange, [], {
              #startDate: startDate,
              #endDate: endDate,
            }),
            returnValue: _i6.Future<List<_i2.Information>>.value(
              <_i2.Information>[],
            ),
          )
          as _i6.Future<List<_i2.Information>>);

  @override
  _i6.Future<List<_i2.Information>> getByTagIds(List<int>? tagIds) =>
      (super.noSuchMethod(
            Invocation.method(#getByTagIds, [tagIds]),
            returnValue: _i6.Future<List<_i2.Information>>.value(
              <_i2.Information>[],
            ),
          )
          as _i6.Future<List<_i2.Information>>);
}

/// A class which mocks [TagRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTagRepository extends _i1.Mock implements _i7.TagRepository {
  MockTagRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Tag> create(_i3.Tag? tag) =>
      (super.noSuchMethod(
            Invocation.method(#create, [tag]),
            returnValue: _i6.Future<_i3.Tag>.value(
              _FakeTag_1(this, Invocation.method(#create, [tag])),
            ),
          )
          as _i6.Future<_i3.Tag>);

  @override
  _i6.Future<_i3.Tag?> getById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getById, [id]),
            returnValue: _i6.Future<_i3.Tag?>.value(),
          )
          as _i6.Future<_i3.Tag?>);

  @override
  _i6.Future<List<_i3.Tag>> getAll() =>
      (super.noSuchMethod(
            Invocation.method(#getAll, []),
            returnValue: _i6.Future<List<_i3.Tag>>.value(<_i3.Tag>[]),
          )
          as _i6.Future<List<_i3.Tag>>);

  @override
  _i6.Future<_i3.Tag> update(_i3.Tag? tag) =>
      (super.noSuchMethod(
            Invocation.method(#update, [tag]),
            returnValue: _i6.Future<_i3.Tag>.value(
              _FakeTag_1(this, Invocation.method(#update, [tag])),
            ),
          )
          as _i6.Future<_i3.Tag>);

  @override
  _i6.Future<void> delete(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i3.Tag?> findByName(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#findByName, [name]),
            returnValue: _i6.Future<_i3.Tag?>.value(),
          )
          as _i6.Future<_i3.Tag?>);

  @override
  _i6.Future<List<_i3.Tag>> getSuggestions(String? prefix, {int? limit = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#getSuggestions, [prefix], {#limit: limit}),
            returnValue: _i6.Future<List<_i3.Tag>>.value(<_i3.Tag>[]),
          )
          as _i6.Future<List<_i3.Tag>>);

  @override
  _i6.Future<void> incrementUsageCount(int? tagId) =>
      (super.noSuchMethod(
            Invocation.method(#incrementUsageCount, [tagId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i3.Tag>> getMostUsed({int? limit = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#getMostUsed, [], {#limit: limit}),
            returnValue: _i6.Future<List<_i3.Tag>>.value(<_i3.Tag>[]),
          )
          as _i6.Future<List<_i3.Tag>>);

  @override
  _i6.Future<List<_i3.Tag>> getUnused() =>
      (super.noSuchMethod(
            Invocation.method(#getUnused, []),
            returnValue: _i6.Future<List<_i3.Tag>>.value(<_i3.Tag>[]),
          )
          as _i6.Future<List<_i3.Tag>>);

  @override
  _i6.Future<int> count() =>
      (super.noSuchMethod(
            Invocation.method(#count, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<List<_i3.Tag>> searchByName(String? searchTerm) =>
      (super.noSuchMethod(
            Invocation.method(#searchByName, [searchTerm]),
            returnValue: _i6.Future<List<_i3.Tag>>.value(<_i3.Tag>[]),
          )
          as _i6.Future<List<_i3.Tag>>);

  @override
  _i6.Future<List<_i3.Tag>> getByColor(String? color) =>
      (super.noSuchMethod(
            Invocation.method(#getByColor, [color]),
            returnValue: _i6.Future<List<_i3.Tag>>.value(<_i3.Tag>[]),
          )
          as _i6.Future<List<_i3.Tag>>);

  @override
  _i6.Future<void> bulkIncrementUsage(List<int>? tagIds) =>
      (super.noSuchMethod(
            Invocation.method(#bulkIncrementUsage, [tagIds]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i8.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i6.Future<_i4.Database>.value(
              _FakeDatabase_2(this, Invocation.getter(#database)),
            ),
          )
          as _i6.Future<_i4.Database>);

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}
